# generated by datamodel-codegen:
#   filename:  apiv2.json
#   timestamp: 2024-03-28T02:07:10+00:00

from __future__ import annotations

import dataclasses
from datetime import datetime
from typing import List, Dict, Optional

from pydantic import BaseModel, ConfigDict, Field, computed_field
from pydantic.dataclasses import dataclass

@dataclass
class PlanetRecord:
    disabled: bool
    hash: int
    index: int
    initial_owner: str
    max_health: int
    name: str
    position: Dict[str, float]
    sector: str
    waypoints: List[int]

@dataclass
class PlanetStatus:
    # timestamp:
    health: int
    owner: str
    planet: PlanetRecord
    players: int
    regen_per_second: float
    _liberation: Optional[float] = None

    @property
    def liberation(self) -> float:
        if self._liberation is not None and self._liberation >= 0:
            return self._liberation
        if self.owner == "Humans":
            self._liberation = (self.health/self.planet.max_health)*100
        else:
            self._liberation = (1.0-(self.health/self.planet.max_health))*100
        return self._liberation
    
    @liberation.setter
    def liberation(self, val:float) -> None:
        self._liberation = val


@dataclass
class Campaign:
    count: int
    id: int
    planet: PlanetRecord
    type: int

@dataclass
class Attacks:
    source: PlanetRecord
    target: PlanetRecord

    def __iter__(self):
        return iter((self.source.index, self.target.index))

@dataclass
class PlanetEvent:
    campaign: Campaign
    event_type: int
    start_time: datetime
    expire_time: datetime
    health: int
    max_health: int
    id: int
    joint_operations: List[Dict]
    planet: PlanetRecord
    race: str

    @computed_field
    @property
    def liberation(self) -> float:
        return (1.0 - (self.health / self.max_health)) * 100

@dataclass
class Dispatch:
    id: int
    message: Dict[str,str]
    title:Optional[str]

@dataclass
class FullStatus:
    campaigns: List[Campaign]
    impact_multiplier: float
    planet_attacks: List[Attacks]
    planet_status: List[PlanetStatus]
    planet_events: List[PlanetEvent]
    global_events: List[Dispatch]
    # We'll just override this with the commit timestamp
    snapshot_at: datetime
    started_at: datetime
    war_id: int
    version: Optional[int] = dataclasses.field(default=None)